---
export interface Product {
  id: number
  title: string
  description: string
  image: string
  link: string
  status: string
  category: string
}

export interface Props {
  product: Product
}

const {product} = Astro.props
---

<div class='product-card' data-product-card>
  <div class='product-content'>
    <div class='product-text'>
      <div class='product-header'>
        <a
          href={product.link}
          target='_blank'
          rel='noopener noreferrer'
          class='product-title-link'
          data-title-link
        >
          <h3 class='product-title' data-title>{product.title}</h3>
        </a>
        <div class='product-meta' data-meta>
          <span
            class={`status-badge status-${product.status.toLowerCase().replace(' ', '-')}`}
            data-status
          >
            {product.status}
          </span>
          <span class='category-badge' data-category>{product.category}</span>
        </div>
      </div>

      <p class='product-description' data-description>{product.description}</p>
    </div>

    <div class='product-visual'>
      <div class='product-image-container' data-image-container>
        <img
          src={product.image}
          alt={`${product.title} interface`}
          class='product-image'
          loading='lazy'
          data-image
        />
        <div class='image-overlay' data-overlay></div>
      </div>
    </div>
  </div>

  <div class='card-border' data-border></div>
</div>

<style>
  .product-card {
    position: relative;
    width: 100%;
    max-width: 1100px;
    height: 500px;
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.6);
    overflow: hidden;
    cursor: pointer;
    margin: 0 auto;
    backdrop-filter: blur(20px);
    will-change: transform;
  }

  .card-border {
    position: absolute;
    inset: -1px;
    border-radius: 21px;
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0.05),
      rgba(255, 255, 255, 0.1)
    );
    opacity: 0;
    z-index: -1;
    will-change: opacity;
  }

  .product-content {
    display: flex;
    height: 100%;
    padding: 48px;
    gap: 32px;
    align-items: center;
  }

  .product-text {
    flex: 0 0 45%;
    z-index: 2;
  }

  .product-header {
    margin-bottom: 24px;
  }

  .product-title-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .product-title {
    color: #fff;
    font-family: 'Victor Mono', monospace;
    font-size: 2.5rem;
    font-weight: 400;
    line-height: 100%;
    letter-spacing: -0.2rem;
    margin-bottom: 16px;
    will-change: transform, color;
    opacity: 0;
    transform: translateY(20px);
    transition: color 0.3s ease;
  }

  .product-title:hover {
    color: #e5e5e5;
  }

  .product-meta {
    display: flex;
    gap: 12px;
    align-items: center;
    will-change: transform;
    opacity: 0;
    transform: translateY(20px);
  }

  .status-badge,
  .category-badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    font-family: 'Victor Mono', monospace;
    will-change: transform;
  }

  .status-badge {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .status-badge.status-beta {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .status-badge.status-coming-soon {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .category-badge {
    background: rgba(255, 255, 255, 0.05);
    color: #a1a1aa;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .product-description {
    color: #7f7f7f;
    font-family: 'Victor Mono', monospace;
    font-size: 1.25rem;
    font-weight: 400;
    line-height: 130%;
    letter-spacing: -0.1rem;
    will-change: color;
    opacity: 0;
    transform: translateY(20px);
  }

  .product-visual {
    flex: 1;
    position: relative;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-image-container {
    position: relative;
    width: 100%;
    height: 80%;
    border-radius: 16px;
    overflow: hidden;
    will-change: transform;
    opacity: 0;
    transform: translateY(20px);
  }

  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    will-change: transform;
  }

  .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.02));
    opacity: 0;
    will-change: opacity;
  }

  @media (max-width: 1024px) {
    .product-card {
      height: auto;
      min-height: 400px;
    }

    .product-content {
      flex-direction: column;
      padding: 32px;
      gap: 32px;
    }

    .product-text {
      flex: none;
    }

    .product-title {
      font-size: 2rem;
    }

    .product-description {
      font-size: 1.125rem;
    }
  }

  @media (max-width: 768px) {
    .product-card {
      height: auto;
      min-height: 350px;
    }

    .product-content {
      padding: 24px;
      gap: 24px;
    }

    .product-title {
      font-size: 1.75rem;
      letter-spacing: -0.1rem;
    }

    .product-description {
      font-size: 1rem;
    }
  }
</style>

<script>
  import {animate, stagger} from 'motion'

  function initProductCardAnimations() {
    const cards = document.querySelectorAll('[data-product-card]')

    cards.forEach(card => {
      const title = card.querySelector('[data-title]')
      const titleLink = card.querySelector('[data-title-link]')
      const meta = card.querySelector('[data-meta]')
      const description = card.querySelector('[data-description]')
      const imageContainer = card.querySelector('[data-image-container]')
      const image = card.querySelector('[data-image]')
      const overlay = card.querySelector('[data-overlay]')
      const border = card.querySelector('[data-border]')

      // Initial animation on load with staggered entrance
      const elements = [title, meta, description, imageContainer].filter(Boolean)

      animate(
        elements,
        {
          opacity: [0, 1],
          y: [20, 0],
        },
        {
          duration: 0.6,
          delay: stagger(0.1),
        },
      )

      // Hover animations
      card.addEventListener('mouseenter', () => {
        // Card elevation
        animate(
          card,
          {
            y: [0, -6],
            borderColor: ['rgba(255, 255, 255, 0.1)', 'rgba(255, 255, 255, 0.2)'],
          },
          {duration: 0.4},
        )

        // Border glow effect
        if (border) {
          animate(border, {opacity: [0, 1]}, {duration: 0.4})
        }

        // Description color change
        if (description) {
          animate(description, {color: ['#7f7f7f', '#a1a1aa']}, {duration: 0.3})
        }

        // Image container subtle scale
        if (imageContainer) {
          animate(
            imageContainer,
            {
              scale: [1, 1.02],
            },
            {duration: 0.4},
          )
        }

        // Image zoom
        if (image) {
          animate(image, {scale: [1, 1.05]}, {duration: 0.6})
        }

        // Overlay fade in
        if (overlay) {
          animate(overlay, {opacity: [0, 1]}, {duration: 0.3})
        }

        // Meta badges subtle animation
        const badges = card.querySelectorAll('[data-status], [data-category]')
        animate(
          badges,
          {
            scale: [1, 1.02],
            y: [0, -1],
          },
          {
            duration: 0.3,
            delay: stagger(0.05),
          },
        )
      })

      card.addEventListener('mouseleave', () => {
        // Reset card position and border
        animate(
          card,
          {
            y: [-6, 0],
            borderColor: ['rgba(255, 255, 255, 0.2)', 'rgba(255, 255, 255, 0.1)'],
          },
          {duration: 0.4},
        )

        // Reset border glow
        if (border) {
          animate(border, {opacity: [1, 0]}, {duration: 0.4})
        }

        // Reset description
        if (description) {
          animate(description, {color: ['#a1a1aa', '#7f7f7f']}, {duration: 0.3})
        }

        // Reset image container
        if (imageContainer) {
          animate(
            imageContainer,
            {
              scale: [1.02, 1],
            },
            {duration: 0.4},
          )
        }

        // Reset image
        if (image) {
          animate(image, {scale: [1.05, 1]}, {duration: 0.6})
        }

        // Reset overlay
        if (overlay) {
          animate(overlay, {opacity: [1, 0]}, {duration: 0.3})
        }

        // Reset badges
        const badges = card.querySelectorAll('[data-status], [data-category]')
        animate(
          badges,
          {
            scale: [1.02, 1],
            y: [-1, 0],
          },
          {
            duration: 0.3,
            delay: stagger(0.05),
          },
        )
      })

      // Click animation
      card.addEventListener('mousedown', () => {
        animate(card, {scale: [1, 0.98]}, {duration: 0.1})
      })

      card.addEventListener('mouseup', () => {
        animate(card, {scale: [0.98, 1]}, {duration: 0.2})
      })
    })
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initProductCardAnimations)
</script>
