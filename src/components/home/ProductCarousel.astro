---
import ProductCard from './ProductCard.astro'

export interface Product {
  id: number
  title: string
  description: string
  image: string
  link: string
  status: string
  category: string
}

export interface Props {
  products: Product[]
}

const {products} = Astro.props
---

<div class='product-carousel-container'>
  <div class='product-carousel' id='productCarousel'>
    {
      products.map((product, index) => (
        <div class='carousel-slide' data-slide={index}>
          <ProductCard product={product} />
        </div>
      ))
    }
  </div>

  {
    products.length > 1 && (
      <div class='carousel-controls'>
        <button class='carousel-btn prev-btn' id='prevBtn' aria-label='Previous product'>
          <svg
            width='20'
            height='20'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
          >
            <path d='M15 18l-6-6 6-6' />
          </svg>
        </button>

        <div class='carousel-indicators'>
          {products.map((_, index) => (
            <button
              class={`indicator ${index === 0 ? 'active' : ''}`}
              data-slide={index}
              aria-label={`Go to product ${index + 1}`}
            />
          ))}
        </div>

        <button class='carousel-btn next-btn' id='nextBtn' aria-label='Next product'>
          <svg
            width='20'
            height='20'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
          >
            <path d='M9 18l6-6-6-6' />
          </svg>
        </button>
      </div>
    )
  }
</div>

<style>
  .product-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .product-carousel {
    display: flex;
    width: 100%;
    will-change: transform;
  }

  .carousel-slide {
    min-width: 100%;
    flex-shrink: 0;
    display: flex;
    justify-content: center;
  }

  .carousel-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 24px;
    margin-top: 40px;
    opacity: 0;
    transform: translateY(20px);
  }

  .carousel-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border-radius: 50%;
    border: 1px solid rgba(255, 255, 255, 0.15);
    background: rgba(255, 255, 255, 0.05);
    color: #fff;
    cursor: pointer;
    backdrop-filter: blur(12px);
    will-change: transform;
  }

  .carousel-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .carousel-indicators {
    display: flex;
    gap: 10px;
  }

  .indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.3);
    cursor: pointer;
    will-change: transform, background-color;
  }

  .indicator.active {
    background: #fff;
    transform: scale(1.4);
  }

  @media (max-width: 768px) {
    .carousel-controls {
      gap: 20px;
      margin-top: 32px;
    }

    .carousel-btn {
      width: 40px;
      height: 40px;
    }
  }
</style>

<script>
  import {animate} from 'motion'

  class ProductCarousel {
    private carousel: HTMLElement | null = null
    private slides: NodeListOf<HTMLElement> = document.querySelectorAll('')
    private indicators: NodeListOf<HTMLElement> = document.querySelectorAll('')
    private prevBtn: HTMLElement | null = null
    private nextBtn: HTMLElement | null = null
    private controls: HTMLElement | null = null
    private currentSlide: number = 0
    private totalSlides: number = 0
    private autoPlayInterval: number | null = null

    constructor() {
      this.carousel = document.getElementById('productCarousel')
      if (!this.carousel) return

      this.slides = this.carousel.querySelectorAll('.carousel-slide')
      this.indicators = document.querySelectorAll('.indicator')
      this.prevBtn = document.getElementById('prevBtn')
      this.nextBtn = document.getElementById('nextBtn')
      this.controls = document.querySelector('.carousel-controls')
      this.totalSlides = this.slides.length

      this.init()
    }

    init() {
      if (this.totalSlides <= 1) return

      this.bindEvents()
      this.setupButtonAnimations()
      this.setupIndicatorAnimations()
      this.startAutoPlay()
      this.updateControls()
      this.animateInitialLoad()
    }

    animateInitialLoad() {
      if (!this.controls) return

      animate(
        this.controls,
        {
          opacity: [0, 1],
          y: [20, 0],
        },
        {
          duration: 0.6,
          delay: 0.3,
        },
      )
    }

    setupButtonAnimations() {
      const buttons = [this.prevBtn, this.nextBtn].filter(Boolean) as HTMLElement[]

      buttons.forEach(button => {
        button.addEventListener('mouseenter', () => {
          animate(
            button,
            {
              scale: [1, 1.05],
              y: [0, -2],
            },
            {duration: 0.2},
          )
        })

        button.addEventListener('mouseleave', () => {
          animate(
            button,
            {
              scale: [1.05, 1],
              y: [-2, 0],
            },
            {duration: 0.2},
          )
        })

        button.addEventListener('mousedown', () => {
          animate(button, {scale: [1.05, 0.95]}, {duration: 0.1})
        })

        button.addEventListener('mouseup', () => {
          animate(button, {scale: [0.95, 1.05]}, {duration: 0.1})
        })
      })
    }

    setupIndicatorAnimations() {
      this.indicators.forEach(indicator => {
        indicator.addEventListener('mouseenter', () => {
          if (!indicator.classList.contains('active')) {
            animate(
              indicator,
              {
                scale: [1, 1.2],
                backgroundColor: ['rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 0.6)'],
              },
              {duration: 0.2},
            )
          }
        })

        indicator.addEventListener('mouseleave', () => {
          if (!indicator.classList.contains('active')) {
            animate(
              indicator,
              {
                scale: [1.2, 1],
                backgroundColor: ['rgba(255, 255, 255, 0.6)', 'rgba(255, 255, 255, 0.3)'],
              },
              {duration: 0.2},
            )
          }
        })
      })
    }

    bindEvents() {
      this.prevBtn?.addEventListener('click', () => this.prevSlide())
      this.nextBtn?.addEventListener('click', () => this.nextSlide())

      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index))
      })

      if (this.carousel) {
        this.carousel.addEventListener('mouseenter', () => this.stopAutoPlay())
        this.carousel.addEventListener('mouseleave', () => this.startAutoPlay())
      }

      document.addEventListener('keydown', e => {
        if (e.key === 'ArrowLeft') this.prevSlide()
        if (e.key === 'ArrowRight') this.nextSlide()
      })

      let touchStartX = 0
      let touchEndX = 0

      this.carousel?.addEventListener('touchstart', e => {
        touchStartX = e.changedTouches[0].screenX
      })

      this.carousel?.addEventListener('touchend', e => {
        touchEndX = e.changedTouches[0].screenX
        this.handleSwipe(touchStartX, touchEndX)
      })
    }

    handleSwipe(startX: number, endX: number) {
      const swipeThreshold = 50
      const diff = startX - endX

      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          this.nextSlide()
        } else {
          this.prevSlide()
        }
      }
    }

    goToSlide(index: number) {
      this.currentSlide = index
      this.updateCarousel()
      this.updateControls()
      this.resetAutoPlay()
    }

    nextSlide() {
      this.currentSlide = (this.currentSlide + 1) % this.totalSlides
      this.updateCarousel()
      this.updateControls()
      this.resetAutoPlay()
    }

    prevSlide() {
      this.currentSlide = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides
      this.updateCarousel()
      this.updateControls()
      this.resetAutoPlay()
    }

    updateCarousel() {
      if (!this.carousel) return

      const translateX = -this.currentSlide * 100

      animate(
        this.carousel,
        {
          transform: [
            `translateX(${this.carousel.style.transform || 'translateX(0%)'})`,
            `translateX(${translateX}%)`,
          ],
        },
        {duration: 0.8},
      )
    }

    updateControls() {
      this.indicators.forEach((indicator, index) => {
        const isActive = index === this.currentSlide

        if (isActive && !indicator.classList.contains('active')) {
          indicator.classList.add('active')
          animate(
            indicator,
            {
              scale: [1, 1.4],
              backgroundColor: ['rgba(255, 255, 255, 0.3)', '#fff'],
            },
            {duration: 0.3},
          )
        } else if (!isActive && indicator.classList.contains('active')) {
          indicator.classList.remove('active')
          animate(
            indicator,
            {
              scale: [1.4, 1],
              backgroundColor: ['#fff', 'rgba(255, 255, 255, 0.3)'],
            },
            {duration: 0.3},
          )
        }
      })
    }

    startAutoPlay() {
      if (this.totalSlides <= 1) return

      this.autoPlayInterval = window.setInterval(() => {
        this.nextSlide()
      }, 6000)
    }

    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval)
        this.autoPlayInterval = null
      }
    }

    resetAutoPlay() {
      this.stopAutoPlay()
      this.startAutoPlay()
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new ProductCarousel()
  })
</script>
